// This is the main
block main ()
    1
    // do ( -- I64)
    do ( I64 )
        2
    end
    + : print
    3
    [ flipsubid ] $
    print
    id
end

type Bool ( Type )
    case false ( Bool )
    case true  ( Bool )
end

type Struct ( Type )
    case struct  ( Bool I64 -- Struct )
end

block apply ( %0 ( %0 -- %1 ) -- %1 ) $ end
block apply_plus1 ( I64 -- I64 ) [ 1 + ] $ end

block apply0_1 ( I64 ) [ 1 ] $ end
block apply1_1 ( I64 ) 1 [ 1 + ] $ end
block apply2_1 ( I64 ) 1 2 [ flipsub ] $ end
block apply1_2 ( I64 I64 ) 3 [ : 2 - ~ 1 + ~ ] $ end

block flipsub ( I64 I64 -- I64 ) ~ - end

block flipsubid ( I64 I64 -- I64 ) ~ - id end

block id  (          )      end
block id2 ( '0 -- '0 )  : . end
block id3 (          ) [] . end
block id4 (          )  0 . end

block subflip ( '0 I64 I64 -- I64 '0 ) - ~ end

block k_K7 ( '1 '0 -- I64 )
    do ( '0 -- I64 ) . 7 end
    do ( '1 '0 -- '0 ) ~ . end
end

block outer
    block inner1 ( I64 )        2 1 - end
    block inner2 ( -- I64 )     1 1 + end
    block inner3                2 1 + end
end

    /////////////////////////////////
    //   Currently undecided        //
    /////////////////////////////////

block weird_apply // possible cases:
    // ( ( '0 -- %0 ) '1 '0 -- '1 %0 )
    // ( %0 ( %0 '1 '0 -- %1 ) '1 '0 -- %1 )
    rot $
end

    /////////////////////////////////
    //   Currently under testing   //
    /////////////////////////////////

    /////////////////////////////////
    //   Usefull builtins stuff    //
    /////////////////////////////////

// // Combinators
// if       ( %0 Bool ( %0 -- %1 ) ( %0 -- %1 ) -- %1 )
// ?        ( Bool '0 '0 -- '0 )

// // Quotes
// curry    ( '0 ( %0 ) Quote -- ( '0 %0 ) Quote )
// compose  ( ( %1 ) Quote ( %0 ) Quote -- ( %1 %0 ) Quote )
// composeR ( ( %3 -- %0 ) ( %1 %0 -- %2 ) -- ( %1 %3 -- %2 ) )
// composeL ( ( %2 -- %3 %0 ) ( %0 -- %1 ) -- ( %2 -- %3 %1 ) )

// // Language
// member>> ( struct -- struct.member )
// when     ( '0 Maybe ( '0 -- '1 ) -- '1 Maybe )
// at       ( '0 '0 '1 Map -- '1 Maybe )
// at*      ( '0 '0 '1 Map '1 -- '1 Bool )

// // Constructor
// <thing> ( ?? -- Thing )

    /////////////////////////////////
    //   Currently not supported   //
    /////////////////////////////////

// block s ( ( '1 '0 -- '2 ) ( '0 -- '1 ) '0 -- '2 )
//     do ( ( '0 -- '1 ) '0 -- '1 '0 )
//         // rot  ( '2 '1 '0 -- '1 '0 '2 )
//         : rot $ ~
//     end do ( ( '1 '0 -- '2 ) '1 '0 -- '2 )
//      // f (x g) x
//         // rot  ( '2 '1 '0 -- '1 '0 '2 )
//         rot $
//     end
// end
// 
// block s_2 ( '0 ( '0 -- '1 ) ( '1 '0 -- '2 ) -- '2 )
//     do ( '2 '1 '0 -- '0 '1 '2 )
//         ~ rot
//     end
//     // ( %2 ( %0 -- %1 '1 '0 ) '0 -- %1 '0 '1 )
//     do ( ( '0 -- '1 ) '0 -- '1 '0 )
//         : rot $ ~
//     end
//     do ( ( '1 '0 -- '2 ) '1 '0 -- '2 )
//         rot $
//     end
// end

// // Loops / Recursion
// block factRec ( I64 -- I64 )
//     : 1 < if . 1 else : 1 - <$> * fi
// end
// block factRec2 ( I64 -- I64 )
//     // <$2> :: ( %0 ( %0 -- %1 Bool ) ( %1 -- %2 ) ( %1 -- %3 ) ( %3 -- %2 )
//     //          -- %2 )
//     [ : 1 < ] [ . 1 ] [ : 1 - ] [ * ] <$2>
// end
// block factRec2Sugar ( I64 -- I64 )
//     rec_while   : 1 < not
//     do          : 1 -
//     then        *
//     else        . 1
//     end
// end
// block factRecQuote ( I64 -- I64 )
//     : 1 < [ . 1 ] [ : 1 - factRecQuote * ] if_
// end
// block factAcc ( I64 -- I64 )
//     1 ~
//     do ( I64 I64 -- I64 )
//         : rot * ~
//         : 1 < if . else 1 - <$> fi
//     end
// end
// block factAccMatch ( I64 -- I64 )
//     1 ~
//     do ( I64 I64 -- I64 )
//         : rot * ~
//         : 1 < match
//             case(True)  .
//             case(False) 1 - <$>
//         end
//     end
// end
// block fibRec ( I64 -- I64 )
//     : 2 < if 1 == if 1 else 0 fi else : 1 - <$> ~ 2 - <$> + fi
// end
// block fibRecQuote ( I64 -- I64 )
//     : 2 < [ 1 == [ 1 ] [ 0 ] if_ ] [ [ 1 - fibRecQuote ] [ 2 - fibRecQuote ] + ] if_
// end
// block fibAcc ( I64 -- I64 )
//     0 1 rot
//     do ( I64 I64 I64 -- I64 )
//         : 1 <
//         if . .
//         else 1 - rot rot : rot + rot <$>
//         fi
//     end
// end

// // Explicit type variables
// block id    ( t {t Type} -- t  ) . end
// block id'   ( t {t}      -- t  ) . end
// block id''  ( '0         -- '0 ) nop end
// block idI64 ( I64 -- I64 ) I64 id2 end

// type '0 Optional     // Optional (        Type  -- Type        )
//     case '0 Some     // Some     ( '0 {'0 Type} -- '0 Optional )
//     case None        // None     (    {'0 Type} -- '0 Optional )
// end

// // Type constructors
// block Ptr    ( Type      -- Type ) sry end
// block Arr    ( U64  Type -- Type ) sry end
// block Pair   ( Type Type -- Type ) sry end
// block Either ( Type Type -- Type ) sry end

// // Dependend types
// block arrHead ( {n U64} 1 + '0 Arr -- '0 ) sry end
// block arrTail ( {n U64} 1 + '0 Arr -- n '0 Arr ) sry end
// block arrCat  ( {n U64} '0 Arr {m U64} '0 Arr -- n m + '0 Arr ) sry end

